// quorum_quest_api.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: quorum_quest_api.proto

package apiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TryAcquireLockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`                   // Service identifier
	Domain        string                 `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`                     // Domain scope
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Unique client identifier
	Ttl           int64                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                          // Time-to-live for the lock in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryAcquireLockRequest) Reset() {
	*x = TryAcquireLockRequest{}
	mi := &file_quorum_quest_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryAcquireLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryAcquireLockRequest) ProtoMessage() {}

func (x *TryAcquireLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryAcquireLockRequest.ProtoReflect.Descriptor instead.
func (*TryAcquireLockRequest) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{0}
}

func (x *TryAcquireLockRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *TryAcquireLockRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TryAcquireLockRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TryAcquireLockRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type TryAcquireLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsLeader      bool                   `protobuf:"varint,1,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"` // Whether leadership was acquired
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryAcquireLockResponse) Reset() {
	*x = TryAcquireLockResponse{}
	mi := &file_quorum_quest_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryAcquireLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryAcquireLockResponse) ProtoMessage() {}

func (x *TryAcquireLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryAcquireLockResponse.ProtoReflect.Descriptor instead.
func (*TryAcquireLockResponse) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{1}
}

func (x *TryAcquireLockResponse) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

type ReleaseLockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`                   // Service identifier
	Domain        string                 `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`                     // Domain scope
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Client releasing the lock
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseLockRequest) Reset() {
	*x = ReleaseLockRequest{}
	mi := &file_quorum_quest_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockRequest) ProtoMessage() {}

func (x *ReleaseLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockRequest.ProtoReflect.Descriptor instead.
func (*ReleaseLockRequest) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseLockRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ReleaseLockRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ReleaseLockRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type ReleaseLockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseLockResponse) Reset() {
	*x = ReleaseLockResponse{}
	mi := &file_quorum_quest_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockResponse) ProtoMessage() {}

func (x *ReleaseLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockResponse.ProtoReflect.Descriptor instead.
func (*ReleaseLockResponse) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{3}
}

type KeepAliveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`                   // Service identifier
	Domain        string                 `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`                     // Domain scope
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Client extending the lease
	Ttl           int64                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                          // New TTL in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	mi := &file_quorum_quest_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{4}
}

func (x *KeepAliveRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *KeepAliveRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *KeepAliveRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KeepAliveRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type KeepAliveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaseLength   *durationpb.Duration   `protobuf:"bytes,1,opt,name=lease_length,json=leaseLength,proto3" json:"lease_length,omitempty"` // Duration of the new lease
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepAliveResponse) Reset() {
	*x = KeepAliveResponse{}
	mi := &file_quorum_quest_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveResponse) ProtoMessage() {}

func (x *KeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quorum_quest_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveResponse.ProtoReflect.Descriptor instead.
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_quorum_quest_api_proto_rawDescGZIP(), []int{5}
}

func (x *KeepAliveResponse) GetLeaseLength() *durationpb.Duration {
	if x != nil {
		return x.LeaseLength
	}
	return nil
}

var File_quorum_quest_api_proto protoreflect.FileDescriptor

var file_quorum_quest_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a,
	0x15, 0x54, 0x72, 0x79, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x35, 0x0a, 0x16, 0x54, 0x72, 0x79, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x63,
	0x0a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x10, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22,
	0x51, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x32, 0xc6, 0x02, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0e,
	0x54, 0x72, 0x79, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2a,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x79, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x79, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xcd, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x69, 0x76, 0x6c,
	0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x51, 0x51, 0x41, 0xaa, 0x02, 0x13, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x5c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1f, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x5c,
	0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x16, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x3a, 0x3a, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_quorum_quest_api_proto_rawDescOnce sync.Once
	file_quorum_quest_api_proto_rawDescData = file_quorum_quest_api_proto_rawDesc
)

func file_quorum_quest_api_proto_rawDescGZIP() []byte {
	file_quorum_quest_api_proto_rawDescOnce.Do(func() {
		file_quorum_quest_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_quorum_quest_api_proto_rawDescData)
	})
	return file_quorum_quest_api_proto_rawDescData
}

var file_quorum_quest_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_quorum_quest_api_proto_goTypes = []any{
	(*TryAcquireLockRequest)(nil),  // 0: quorum.quest.api.v1.TryAcquireLockRequest
	(*TryAcquireLockResponse)(nil), // 1: quorum.quest.api.v1.TryAcquireLockResponse
	(*ReleaseLockRequest)(nil),     // 2: quorum.quest.api.v1.ReleaseLockRequest
	(*ReleaseLockResponse)(nil),    // 3: quorum.quest.api.v1.ReleaseLockResponse
	(*KeepAliveRequest)(nil),       // 4: quorum.quest.api.v1.KeepAliveRequest
	(*KeepAliveResponse)(nil),      // 5: quorum.quest.api.v1.KeepAliveResponse
	(*durationpb.Duration)(nil),    // 6: google.protobuf.Duration
}
var file_quorum_quest_api_proto_depIdxs = []int32{
	6, // 0: quorum.quest.api.v1.KeepAliveResponse.lease_length:type_name -> google.protobuf.Duration
	0, // 1: quorum.quest.api.v1.LeaderElectionService.TryAcquireLock:input_type -> quorum.quest.api.v1.TryAcquireLockRequest
	2, // 2: quorum.quest.api.v1.LeaderElectionService.ReleaseLock:input_type -> quorum.quest.api.v1.ReleaseLockRequest
	4, // 3: quorum.quest.api.v1.LeaderElectionService.KeepAlive:input_type -> quorum.quest.api.v1.KeepAliveRequest
	1, // 4: quorum.quest.api.v1.LeaderElectionService.TryAcquireLock:output_type -> quorum.quest.api.v1.TryAcquireLockResponse
	3, // 5: quorum.quest.api.v1.LeaderElectionService.ReleaseLock:output_type -> quorum.quest.api.v1.ReleaseLockResponse
	5, // 6: quorum.quest.api.v1.LeaderElectionService.KeepAlive:output_type -> quorum.quest.api.v1.KeepAliveResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_quorum_quest_api_proto_init() }
func file_quorum_quest_api_proto_init() {
	if File_quorum_quest_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quorum_quest_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quorum_quest_api_proto_goTypes,
		DependencyIndexes: file_quorum_quest_api_proto_depIdxs,
		MessageInfos:      file_quorum_quest_api_proto_msgTypes,
	}.Build()
	File_quorum_quest_api_proto = out.File
	file_quorum_quest_api_proto_rawDesc = nil
	file_quorum_quest_api_proto_goTypes = nil
	file_quorum_quest_api_proto_depIdxs = nil
}
