// api/gen/go/v1/quorum_quest_api_grpc.pb.go
// api/proto/v1/quorum_quest_api.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/quorum_quest_api.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaderElectionService_TryAcquireLock_FullMethodName = "/quorum.quest.api.v1.LeaderElectionService/TryAcquireLock"
	LeaderElectionService_ReleaseLock_FullMethodName    = "/quorum.quest.api.v1.LeaderElectionService/ReleaseLock"
	LeaderElectionService_KeepAlive_FullMethodName      = "/quorum.quest.api.v1.LeaderElectionService/KeepAlive"
)

// LeaderElectionServiceClient is the client API for LeaderElectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LeaderElectionService provides distributed leader election capabilities
type LeaderElectionServiceClient interface {
	// TryAcquireLock attempts to acquire leadership for a given service/domain
	TryAcquireLock(ctx context.Context, in *TryAcquireLockRequest, opts ...grpc.CallOption) (*TryAcquireLockResponse, error)
	// ReleaseLock voluntarily releases leadership
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error)
	// KeepAlive extends the leadership lease
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
}

type leaderElectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderElectionServiceClient(cc grpc.ClientConnInterface) LeaderElectionServiceClient {
	return &leaderElectionServiceClient{cc}
}

func (c *leaderElectionServiceClient) TryAcquireLock(ctx context.Context, in *TryAcquireLockRequest, opts ...grpc.CallOption) (*TryAcquireLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryAcquireLockResponse)
	err := c.cc.Invoke(ctx, LeaderElectionService_TryAcquireLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderElectionServiceClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseLockResponse)
	err := c.cc.Invoke(ctx, LeaderElectionService_ReleaseLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderElectionServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, LeaderElectionService_KeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderElectionServiceServer is the server API for LeaderElectionService service.
// All implementations must embed UnimplementedLeaderElectionServiceServer
// for forward compatibility.
//
// LeaderElectionService provides distributed leader election capabilities
type LeaderElectionServiceServer interface {
	// TryAcquireLock attempts to acquire leadership for a given service/domain
	TryAcquireLock(context.Context, *TryAcquireLockRequest) (*TryAcquireLockResponse, error)
	// ReleaseLock voluntarily releases leadership
	ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error)
	// KeepAlive extends the leadership lease
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	mustEmbedUnimplementedLeaderElectionServiceServer()
}

// UnimplementedLeaderElectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderElectionServiceServer struct{}

func (UnimplementedLeaderElectionServiceServer) TryAcquireLock(context.Context, *TryAcquireLockRequest) (*TryAcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryAcquireLock not implemented")
}
func (UnimplementedLeaderElectionServiceServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedLeaderElectionServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedLeaderElectionServiceServer) mustEmbedUnimplementedLeaderElectionServiceServer() {}
func (UnimplementedLeaderElectionServiceServer) testEmbeddedByValue()                               {}

// UnsafeLeaderElectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderElectionServiceServer will
// result in compilation errors.
type UnsafeLeaderElectionServiceServer interface {
	mustEmbedUnimplementedLeaderElectionServiceServer()
}

func RegisterLeaderElectionServiceServer(s grpc.ServiceRegistrar, srv LeaderElectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaderElectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderElectionService_ServiceDesc, srv)
}

func _LeaderElectionService_TryAcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryAcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServiceServer).TryAcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderElectionService_TryAcquireLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServiceServer).TryAcquireLock(ctx, req.(*TryAcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderElectionService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderElectionService_ReleaseLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServiceServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderElectionService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderElectionServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderElectionService_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderElectionServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderElectionService_ServiceDesc is the grpc.ServiceDesc for LeaderElectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderElectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quorum.quest.api.v1.LeaderElectionService",
	HandlerType: (*LeaderElectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryAcquireLock",
			Handler:    _LeaderElectionService_TryAcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _LeaderElectionService_ReleaseLock_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _LeaderElectionService_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/quorum_quest_api.proto",
}
