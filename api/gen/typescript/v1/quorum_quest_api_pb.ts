// api/proto/v1/quorum_quest_api.proto

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file v1/quorum_quest_api.proto (package quorum.quest.api.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file v1/quorum_quest_api.proto.
 */
export const file_v1_quorum_quest_api: GenFile = /*@__PURE__*/
  fileDesc("Chl2MS9xdW9ydW1fcXVlc3RfYXBpLnByb3RvEhNxdW9ydW0ucXVlc3QuYXBpLnYxIlgKFVRyeUFjcXVpcmVMb2NrUmVxdWVzdBIPCgdzZXJ2aWNlGAEgASgJEg4KBmRvbWFpbhgCIAEoCRIRCgljbGllbnRfaWQYAyABKAkSCwoDdHRsGAQgASgDIisKFlRyeUFjcXVpcmVMb2NrUmVzcG9uc2USEQoJaXNfbGVhZGVyGAEgASgIIkgKElJlbGVhc2VMb2NrUmVxdWVzdBIPCgdzZXJ2aWNlGAEgASgJEg4KBmRvbWFpbhgCIAEoCRIRCgljbGllbnRfaWQYAyABKAkiFQoTUmVsZWFzZUxvY2tSZXNwb25zZSJTChBLZWVwQWxpdmVSZXF1ZXN0Eg8KB3NlcnZpY2UYASABKAkSDgoGZG9tYWluGAIgASgJEhEKCWNsaWVudF9pZBgDIAEoCRILCgN0dGwYBCABKAMiRAoRS2VlcEFsaXZlUmVzcG9uc2USLwoMbGVhc2VfbGVuZ3RoGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uMsYCChVMZWFkZXJFbGVjdGlvblNlcnZpY2USawoOVHJ5QWNxdWlyZUxvY2sSKi5xdW9ydW0ucXVlc3QuYXBpLnYxLlRyeUFjcXVpcmVMb2NrUmVxdWVzdBorLnF1b3J1bS5xdWVzdC5hcGkudjEuVHJ5QWNxdWlyZUxvY2tSZXNwb25zZSIAEmIKC1JlbGVhc2VMb2NrEicucXVvcnVtLnF1ZXN0LmFwaS52MS5SZWxlYXNlTG9ja1JlcXVlc3QaKC5xdW9ydW0ucXVlc3QuYXBpLnYxLlJlbGVhc2VMb2NrUmVzcG9uc2UiABJcCglLZWVwQWxpdmUSJS5xdW9ydW0ucXVlc3QuYXBpLnYxLktlZXBBbGl2ZVJlcXVlc3QaJi5xdW9ydW0ucXVlc3QuYXBpLnYxLktlZXBBbGl2ZVJlc3BvbnNlIgBC0AEKF2NvbS5xdW9ydW0ucXVlc3QuYXBpLnYxQhNRdW9ydW1RdWVzdEFwaVByb3RvUAFaMWdpdGh1Yi5jb20vYXZpdmwvcXVvcnVtLXF1ZXN0L2FwaS9nZW4vZ28vdjE7YXBpdjGiAgNRUUGqAhNRdW9ydW0uUXVlc3QuQXBpLlYxygITUXVvcnVtXFF1ZXN0XEFwaVxWMeICH1F1b3J1bVxRdWVzdFxBcGlcVjFcR1BCTWV0YWRhdGHqAhZRdW9ydW06OlF1ZXN0OjpBcGk6OlYxYgZwcm90bzM", [file_google_protobuf_duration]);

/**
 * @generated from message quorum.quest.api.v1.TryAcquireLockRequest
 */
export type TryAcquireLockRequest = Message<"quorum.quest.api.v1.TryAcquireLockRequest"> & {
  /**
   * Service identifier
   *
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * Domain scope
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Unique client identifier
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;

  /**
   * Time-to-live for the lock in seconds
   *
   * @generated from field: int64 ttl = 4;
   */
  ttl: bigint;
};

/**
 * Describes the message quorum.quest.api.v1.TryAcquireLockRequest.
 * Use `create(TryAcquireLockRequestSchema)` to create a new message.
 */
export const TryAcquireLockRequestSchema: GenMessage<TryAcquireLockRequest> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 0);

/**
 * @generated from message quorum.quest.api.v1.TryAcquireLockResponse
 */
export type TryAcquireLockResponse = Message<"quorum.quest.api.v1.TryAcquireLockResponse"> & {
  /**
   * Whether leadership was acquired
   *
   * @generated from field: bool is_leader = 1;
   */
  isLeader: boolean;
};

/**
 * Describes the message quorum.quest.api.v1.TryAcquireLockResponse.
 * Use `create(TryAcquireLockResponseSchema)` to create a new message.
 */
export const TryAcquireLockResponseSchema: GenMessage<TryAcquireLockResponse> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 1);

/**
 * @generated from message quorum.quest.api.v1.ReleaseLockRequest
 */
export type ReleaseLockRequest = Message<"quorum.quest.api.v1.ReleaseLockRequest"> & {
  /**
   * Service identifier
   *
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * Domain scope
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Client releasing the lock
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;
};

/**
 * Describes the message quorum.quest.api.v1.ReleaseLockRequest.
 * Use `create(ReleaseLockRequestSchema)` to create a new message.
 */
export const ReleaseLockRequestSchema: GenMessage<ReleaseLockRequest> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 2);

/**
 * Empty response as the operation is fire-and-forget
 *
 * @generated from message quorum.quest.api.v1.ReleaseLockResponse
 */
export type ReleaseLockResponse = Message<"quorum.quest.api.v1.ReleaseLockResponse"> & {
};

/**
 * Describes the message quorum.quest.api.v1.ReleaseLockResponse.
 * Use `create(ReleaseLockResponseSchema)` to create a new message.
 */
export const ReleaseLockResponseSchema: GenMessage<ReleaseLockResponse> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 3);

/**
 * @generated from message quorum.quest.api.v1.KeepAliveRequest
 */
export type KeepAliveRequest = Message<"quorum.quest.api.v1.KeepAliveRequest"> & {
  /**
   * Service identifier
   *
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * Domain scope
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Client extending the lease
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;

  /**
   * New TTL in seconds
   *
   * @generated from field: int64 ttl = 4;
   */
  ttl: bigint;
};

/**
 * Describes the message quorum.quest.api.v1.KeepAliveRequest.
 * Use `create(KeepAliveRequestSchema)` to create a new message.
 */
export const KeepAliveRequestSchema: GenMessage<KeepAliveRequest> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 4);

/**
 * @generated from message quorum.quest.api.v1.KeepAliveResponse
 */
export type KeepAliveResponse = Message<"quorum.quest.api.v1.KeepAliveResponse"> & {
  /**
   * Duration of the new lease
   *
   * @generated from field: google.protobuf.Duration lease_length = 1;
   */
  leaseLength?: Duration;
};

/**
 * Describes the message quorum.quest.api.v1.KeepAliveResponse.
 * Use `create(KeepAliveResponseSchema)` to create a new message.
 */
export const KeepAliveResponseSchema: GenMessage<KeepAliveResponse> = /*@__PURE__*/
  messageDesc(file_v1_quorum_quest_api, 5);

/**
 * LeaderElectionService provides distributed leader election capabilities
 *
 * @generated from service quorum.quest.api.v1.LeaderElectionService
 */
export const LeaderElectionService: GenService<{
  /**
   * TryAcquireLock attempts to acquire leadership for a given service/domain
   *
   * @generated from rpc quorum.quest.api.v1.LeaderElectionService.TryAcquireLock
   */
  tryAcquireLock: {
    methodKind: "unary";
    input: typeof TryAcquireLockRequestSchema;
    output: typeof TryAcquireLockResponseSchema;
  },
  /**
   * ReleaseLock voluntarily releases leadership
   *
   * @generated from rpc quorum.quest.api.v1.LeaderElectionService.ReleaseLock
   */
  releaseLock: {
    methodKind: "unary";
    input: typeof ReleaseLockRequestSchema;
    output: typeof ReleaseLockResponseSchema;
  },
  /**
   * KeepAlive extends the leadership lease
   *
   * @generated from rpc quorum.quest.api.v1.LeaderElectionService.KeepAlive
   */
  keepAlive: {
    methodKind: "unary";
    input: typeof KeepAliveRequestSchema;
    output: typeof KeepAliveResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_v1_quorum_quest_api, 0);

