# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v1 import quorum_quest_api_pb2 as v1_dot_quorum__quest__api__pb2


class LeaderElectionServiceStub(object):
    """LeaderElectionService provides distributed leader election capabilities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryAcquireLock = channel.unary_unary(
                '/quorum.quest.api.v1.LeaderElectionService/TryAcquireLock',
                request_serializer=v1_dot_quorum__quest__api__pb2.TryAcquireLockRequest.SerializeToString,
                response_deserializer=v1_dot_quorum__quest__api__pb2.TryAcquireLockResponse.FromString,
                )
        self.ReleaseLock = channel.unary_unary(
                '/quorum.quest.api.v1.LeaderElectionService/ReleaseLock',
                request_serializer=v1_dot_quorum__quest__api__pb2.ReleaseLockRequest.SerializeToString,
                response_deserializer=v1_dot_quorum__quest__api__pb2.ReleaseLockResponse.FromString,
                )
        self.KeepAlive = channel.unary_unary(
                '/quorum.quest.api.v1.LeaderElectionService/KeepAlive',
                request_serializer=v1_dot_quorum__quest__api__pb2.KeepAliveRequest.SerializeToString,
                response_deserializer=v1_dot_quorum__quest__api__pb2.KeepAliveResponse.FromString,
                )


class LeaderElectionServiceServicer(object):
    """LeaderElectionService provides distributed leader election capabilities
    """

    def TryAcquireLock(self, request, context):
        """TryAcquireLock attempts to acquire leadership for a given service/domain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseLock(self, request, context):
        """ReleaseLock voluntarily releases leadership
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeepAlive(self, request, context):
        """KeepAlive extends the leadership lease
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaderElectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryAcquireLock': grpc.unary_unary_rpc_method_handler(
                    servicer.TryAcquireLock,
                    request_deserializer=v1_dot_quorum__quest__api__pb2.TryAcquireLockRequest.FromString,
                    response_serializer=v1_dot_quorum__quest__api__pb2.TryAcquireLockResponse.SerializeToString,
            ),
            'ReleaseLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseLock,
                    request_deserializer=v1_dot_quorum__quest__api__pb2.ReleaseLockRequest.FromString,
                    response_serializer=v1_dot_quorum__quest__api__pb2.ReleaseLockResponse.SerializeToString,
            ),
            'KeepAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.KeepAlive,
                    request_deserializer=v1_dot_quorum__quest__api__pb2.KeepAliveRequest.FromString,
                    response_serializer=v1_dot_quorum__quest__api__pb2.KeepAliveResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quorum.quest.api.v1.LeaderElectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaderElectionService(object):
    """LeaderElectionService provides distributed leader election capabilities
    """

    @staticmethod
    def TryAcquireLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.quest.api.v1.LeaderElectionService/TryAcquireLock',
            v1_dot_quorum__quest__api__pb2.TryAcquireLockRequest.SerializeToString,
            v1_dot_quorum__quest__api__pb2.TryAcquireLockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.quest.api.v1.LeaderElectionService/ReleaseLock',
            v1_dot_quorum__quest__api__pb2.ReleaseLockRequest.SerializeToString,
            v1_dot_quorum__quest__api__pb2.ReleaseLockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeepAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quorum.quest.api.v1.LeaderElectionService/KeepAlive',
            v1_dot_quorum__quest__api__pb2.KeepAliveRequest.SerializeToString,
            v1_dot_quorum__quest__api__pb2.KeepAliveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
